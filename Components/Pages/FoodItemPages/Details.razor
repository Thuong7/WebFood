@page "/fooditems/details"

@using Microsoft.EntityFrameworkCore
@using Assignment.Models
@inject IDbContextFactory<Assignment.Models.FastFoodDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h4>FoodItem</h4>
    <hr />
    @if (fooditem is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@fooditem.Name</dd>
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@fooditem.Description</dd>
            <dt class="col-sm-2">Price</dt>
            <dd class="col-sm-10">@fooditem.Price</dd>
            <dt class="col-sm-2">Category</dt>
            <dd class="col-sm-10">@fooditem.Category</dd>
            <dt class="col-sm-2">ImageUrl</dt>
            <dd class="col-sm-10">@fooditem.ImageUrl</dd>
        </dl>
        <div>
            <a href="@($"/fooditems/edit?id={fooditem.Id}")">Edit</a> |
            <a href="@($"/fooditems")">Back to List</a>
        </div>
    }
</div>

@code {
    FoodItem? fooditem;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        fooditem = await context.FoodItems.FirstOrDefaultAsync(m => m.Id == Id);

        if (fooditem is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
