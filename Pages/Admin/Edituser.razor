@page "/edituser/{username}"
@using Assignment.Models
@layout MainLayoutAdmin
@attribute [Authorize(Roles = "admin")]
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<h3>Edit User</h3>

<EditForm Model="editingUser" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="username">Username</label>
        <InputText id="username" class="form-control" @bind-Value="editingUser.Username" />
    </div>
    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" class="form-control" @bind-Value="editingUser.Email" />
    </div>
    <div class="form-group">
        <label for="fullname">Full Name</label>
        <InputText id="fullname" class="form-control" @bind-Value="editingUser.FullName" />
    </div>
    <div class="form-group">
        <label for="role">Role</label>
        <InputText id="role" class="form-control" @bind-Value="editingUser.Role" />
    </div>

    <button type="submit" class="btn btn-primary">Update User</button>
    <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
</EditForm>

@code {
    [Parameter] public string Username { get; set; }
    private User editingUser = new User();

    protected override async Task OnInitializedAsync()
    {
        var token = await JS.InvokeAsync<string>("localStorage.getItem", "token");
        if (!string.IsNullOrEmpty(token))
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"https://localhost:44391/api/Users/{Username}");
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                editingUser = await response.Content.ReadFromJsonAsync<User>();
            }
            else
            {
                Console.WriteLine($"Error: {response.StatusCode}");
            }
        }
    }

    private async Task HandleSubmit()
    {
        var token = await JS.InvokeAsync<string>("localStorage.getItem", "token");
        if (!string.IsNullOrEmpty(token))
        {
            var request = new HttpRequestMessage(HttpMethod.Put, $"https://localhost:44391/api/Users/{Username}")
                {
                    Content = JsonContent.Create(editingUser)
                };
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/userslist");
            }
            else
            {
                Console.WriteLine($"Error: {response.StatusCode}");
            }
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/userslist");
    }
}
