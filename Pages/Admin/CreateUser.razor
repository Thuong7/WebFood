@page "/createuser"
@using Assignment.Models
@layout MainLayoutAdmin
@attribute [Authorize(Roles = "admin")]
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<h3>Add New User</h3>

<EditForm Model="newUser" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="username">Username</label>
        <InputText id="username" class="form-control" @bind-Value="newUser.Username" />
    </div>
    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" class="form-control" @bind-Value="newUser.Password" />
    </div>
    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" class="form-control" @bind-Value="newUser.Email" />
    </div>
    <div class="form-group">
        <label for="fullname">Full Name</label>
        <InputText id="fullname" class="form-control" @bind-Value="newUser.FullName" />
    </div>
    <div class="form-group">
        <label for="role">Role</label>
        <InputText id="role" class="form-control" @bind-Value="newUser.Role" />
    </div>

    <button type="submit" class="btn btn-primary">Add User</button>
    <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
</EditForm>

@code {
    private User newUser = new User();
    private string errorMessage;

    private async Task HandleSubmit()
    {
        var token = await JS.InvokeAsync<string>("localStorage.getItem", "token");
        if (!string.IsNullOrEmpty(token))
        {
            try
            {
                var request = new HttpRequestMessage(HttpMethod.Post, "https://localhost:44391/api/Users")
                    {
                        Content = JsonContent.Create(newUser)
                    };
                request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                var response = await Http.SendAsync(request);

                if (response.IsSuccessStatusCode)
                {
                    NavigationManager.NavigateTo("/userslist");
                }
                else
                {
                    errorMessage = $"Error: {response.StatusCode} - {await response.Content.ReadAsStringAsync()}";
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"Request failed: {ex.Message}";
            }
        }
        else
        {
            errorMessage = "No token found";
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/userslist");
    }
}
